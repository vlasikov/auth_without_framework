Напишите, пожалуйста, средствами PHP, MySQL, JavaScript форму 
входа/регистрации нового пользователя. Продумайте самостоятельно 
необходимые поля. В результате заполнения формы пользователь должен 
предоставить информацию о себе. После входа должен отображаться профайл 
зарегистрировавшегося пользователя. Использование различных PHP 
фреймворков не допускается.

1. Форма должна быть выполнена способом, понятным пользователю, 
содержать необходимые инструкции, комментарии и т.п. (usability).
2. Должна быть возможность переключения языка интерфейса формы на другой 
язык.
3. Скрипт должен содержать средства верификации и валидации полей, а 
также защиту от некорректного ввода данных, спецсимволов, попыток взлома 
и т.п.
4. Валидация и верификация полей должна проводиться как на клиентской 
стороне, так и на серверной стороне (средствами PHP).
5. Структура базы данных должна быть обоснованной.
6. Кроме введения текстовых данных пользователь при регистрации должен 
иметь возможность загрузить графический файл форматов gif, jpg, png.
7. Вспомогательные тексты в форме (названия полей, подсказки, ошибки и 
пр.) должны быть сформулированы грамотно и понятно пользователю, 
выдержан деловой и уважительный стиль обращения.
8. Код должен быть написан понятно и аккуратно, с соблюдением табуляции 
и прочих элементов написания, без лишних элементов и функций, не имеющих 
отношения к функционалу тестового задания, снабжен понятными 
комментариями.
9. Обращаем внимание на то, что имеет значение не только техническая 
часть выполненного задания (коды), но и дизайнерская (внешний вид, 
логика оформления, полнота инструкций).
10. Пожалуйста, выполняя тестовое задание, обратите особое внимание на 
качество и безопасность кодов.

Особое внимание стоит обратить на следующие моменты:
- Читабельность и наличие элементарной архитектуры, ООП приветствуется 
(задание где весь код в одном файле будет сразу отклонено).
- Чистота и оформление кода не менее важный фактор, код должен быть 
написан в едином стиле (желательно в рекомендуемом для конкретного 
языка). Также к чистоте относятся отсутствие копипаста и дублирования 
логики.
- Оптимизация базы данных (индексация полей и т.п.).
- Отсутствие явных уязвимостей (например, SQL-инъекций).
- Умение работать с JavaScript и его понимание.

Отсутствие или нарушение данных пунктов вероятнее всего послужит 
причиной отказа.

Временем и инструментом для выполнение тестового задания Вы не 
ограничены. Любые другие аспекты реализации, которые не указаны в 
требованиях, могут быть выполнены на Ваше усмотрение.

Следующее будет плюсом:
- Dockerfile и docker-compose.yml, которые позволяют поднять приложение 
единой docker-compose up командой.
- Модульные тесты, функциональные тесты, CI интеграция (Travis CI, 
Circle CI, другие).

Тестовое задание должно быть представлено в следующем виде:
1. Cсылка на публичный репозиторий (GitHub, BitBucket, GitLab) с 
исходным кодом клиентской и серверной стороны, а также схемой базы 
данных (можно и дампом). Приветствуется README.md файл с обзором 
реализации и/или шагами по запуску.
2. Ссылка на работоспособную форму. Или Dockerfile и 
docker-compose.yaml, позволяющие развернуть локально командой 
docker-compose up работоспособную форму.